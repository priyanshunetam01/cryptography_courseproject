#include "cryptlib.h"
#include "rijndael.h"
#include "modes.h"
#include "files.h"
#include "osrng.h"
#include "hex.h"
#include <iostream>
#include <string>

int main(int argc, char* argv[])
{
    
    using namespace CryptoPP;
    
    AutoSeededRandomPool prng;

    SecByteBlock key(AES::DEFAULT_KEYLENGTH);
    prng.GenerateBlock(key, key.size());

   std:: string plain = "welcome to iiit naya raipur";
   std:: string cipher, encoded, recovered;
    try
    {
        std::cout << "plain text: " << plain << std::endl;

        ECB_Mode< AES >::Encryption e;
        e.SetKey(key, key.size());

        // The StreamTransformationFilter adds padding
        //  as required. ECB and CBC Mode must be padded
        //  to the block size of the cipher.
        StringSource ss1(plain, true,
            new StreamTransformationFilter(e,
                new StringSink(cipher)
            ) // StreamTransformationFilter      
        ); // StringSource
    }
    catch (CryptoPP::Exception& e)
    {
        std::cerr << e.what() << std::endl;
        exit(1);
    }

    

    // Pretty print cipher text
    StringSource ss2(cipher, true,
        new HexEncoder(
            new StringSink(encoded)
        ) // HexEncoder
    ); // StringSource
    std::cout << "cipher text: " << encoded << std::endl;

    
    try
    {
        ECB_Mode< AES >::Decryption d;
        // ECB Mode does not use an IV
        d.SetKey(key, key.size());

        // The StreamTransformationFilter removes
        //  padding as required.
        StringSource ss3(cipher, true,
            new StreamTransformationFilter(d,
                new StringSink(recovered)
            ) // StreamTransformationFilter
        ); // StringSource

        std::cout << "recovered text: " << recovered << std::endl;
        
    }
    catch (CryptoPP::Exception& e)
    {
        std::cerr << e.what() <<std:: endl;
        exit(1);
    }
    return 0;
}