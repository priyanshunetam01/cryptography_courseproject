#include "cryptlib.h"
#include "rijndael.h"
#include "modes.h"
#include "files.h"
#include "osrng.h"
#include "hex.h"

#include <iostream>
#include <string>

int main(int argc, char* argv[])
{
    using namespace CryptoPP;
    AutoSeededRandomPool prng;

    SecByteBlock key(AES::DEFAULT_KEYLENGTH);
    prng.GenerateBlock(key, key.size());

    byte iv[AES::BLOCKSIZE];
    prng.GenerateBlock(iv, sizeof(iv));

    std::string plain = "hello priyanshu";
    std::string cipher, encoded, recovered;



    try
    {
        std::cout << "plain text: " << plain << std::endl;

        CFB_Mode< AES >::Encryption enc;
        enc.SetKeyWithIV(key, key.size(), iv);

        // CFB mode must not use padding. Specifying
        //  a scheme will result in an exception
        StringSource ss1(plain, true,
            new StreamTransformationFilter(enc,
                new StringSink(cipher)
            ) // StreamTransformationFilter      
        ); // StringSource
    }
    catch (CryptoPP::Exception& e)
    {
        std::cerr << e.what() << std::endl;
        exit(1);
    }

    // Pretty print cipher text
    StringSource ss2(cipher, true,
        new HexEncoder(
            new StringSink(encoded)
        ) // HexEncoder
    ); // StringSource
    std::cout << "cipher text: " << encoded << std::endl;



    try
    {
        CFB_Mode< AES >::Decryption dec;
        dec.SetKeyWithIV(key, key.size(), iv);

        // The StreamTransformationFilter removes
        //  padding as required.
        StringSource ss3(cipher, true,
            new StreamTransformationFilter(dec,
                new StringSink(recovered)
            ) // StreamTransformationFilter
        ); // StringSource

        std::cout << "recovered text: " << recovered << std::endl;
    }
    catch (CryptoPP::Exception& e)
    {
        std::cerr << e.what() << std::endl;
        exit(1);
    }
    return 0;
}