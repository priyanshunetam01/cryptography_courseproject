#include "cryptlib.h"
#include "rijndael.h"
#include "modes.h"
#include "files.h"
#include "osrng.h"
#include "hex.h"
#include <algorithm>
#include <chrono>
#include <iostream>

#include <iostream>
#include <string>

int main(int argc, char* argv[])
{
    using namespace CryptoPP;
    AutoSeededRandomPool prng;

    byte key[AES::DEFAULT_KEYLENGTH];
    prng.GenerateBlock(key, sizeof(key));

    byte iv[AES::BLOCKSIZE];
    prng.GenerateBlock(iv, sizeof(iv));

    std::string plain = "welcome IN campus";
    std::string cipher, encoded, recovered;

    try
    {
        std::cout << "plain text: " << plain << std::endl;

        OFB_Mode< AES >::Encryption e;
        e.SetKeyWithIV(key, sizeof(key), iv);

        // OFB mode must not use padding. Specifying
        //  a scheme will result in an exception
        StringSource ss1(plain, true,
            new StreamTransformationFilter(e,
                new StringSink(cipher)
            ) // StreamTransformationFilter      
        ); // StringSource
    }
    catch (CryptoPP::Exception& e)
    {
       std:: cerr << e.what() << std::endl;
        exit(1);
    }


    // Pretty print cipher text
    StringSource ss2(cipher, true,
        new HexEncoder(
            new StringSink(encoded)
        ) // HexEncoder
    ); // StringSource
    std::cout << "cipher text: " << encoded << std::endl;


    try
    {
        OFB_Mode< AES >::Decryption d;
        d.SetKeyWithIV(key, sizeof(key), iv);

        StringSource ss3(cipher, true,
            new StreamTransformationFilter(d,
                new StringSink(recovered)
            ) // StreamTransformationFilter
        ); // StringSource

        std::cout << "recovered text: " << recovered <<std:: endl;
    }
    catch (CryptoPP::Exception& e)
    {
       std:: cerr << e.what() << std::endl;
        exit(1);
    }
    
    return 0;
}